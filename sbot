#!/usr/bin/env python

'''
Shoebot console runner

Copyright 2007, 2008 Ricardo Lafuente
Developed at the Piet Zwart Institute, Rotterdam

This file is part of Shoebot.
'''

import sys, os
import shoebot

DEFAULT_SCRIPT = '/usr/share/shoebot/examples/primitives.py'
DEFAULT_WINDOW_SCRIPT = '/usr/share/shoebot/examples/socketcontrol2.py'
DEFAULT_OUTPUTFILE = 'output.png'
DEFAULT_SERVERPORT = 7777

OUTPUT_EXTENSIONS = ('.png','.svg','.ps','.pdf')

def run_oneshot(script, file):
    ''' Oneshot mode:
    Run a Shoebot script and save output to an image file.'''
    # create a Box instance
    box = shoebot.Box(outputfile = file)

    # run it, and then its setup and draw methods, if they're there
    # (running setup() and draw() isn't always desirable, but for image
    # output it helps to have the final image as a GTK canvas would
    # display it)
    box.run(script)
    if 'setup' in box.namespace:
        box.namespace['setup']()
    if 'draw' in box.namespace:
        box.namespace['draw']()
    box.finish()

def run_window(script, server=False, port=DEFAULT_SERVERPORT, varwindow=False):
    ''' Windowed mode:
    Run a Shoebot script in a GTK window.'''
    win = gtkui.ShoebotWindow(script, server, port, varwindow)

# use OptionParser to interpret commandline options
from optparse import OptionParser
parser = OptionParser("usage: %prog [options] inputfile.bot")
parser.add_option("-o",
                "--outputfile",
                dest="outputfile",
                help="run script and output to FILE (accepts .svg, .ps, .pdf and .png extensions)",
                metavar="FILE")
parser.add_option("-w",
                "--window",
                action="store_true",
                dest="window",
                default=False,
                help="run script in a GTK window"
                )
parser.add_option("-s",
                "--socketserver",
                action="store_true",
                dest="socketserver",
                default=False,
                help="run a socket server for external control (will run the script in windowed mode)")
parser.add_option("-a",
                "--variables",
                action="store_true",
                dest="varwindow",
                default=False,
                help="show a variable tweaking window (will run the script in windowed mode)")
parser.add_option("-p",
                "--serverport",
                type="int",
                dest="serverport",
                default=DEFAULT_SERVERPORT,
                help="set socketserver port to listen for connections (default is 7777)")

def error(message):
    '''Prints an error message, the help message and quits'''
    global parser
    print "Error: " + message
    print
    parser.print_help()
    sys.exit()

if __name__ == '__main__':

    # get optparse arguments and check for sanity
    (options, args) = parser.parse_args()

    if not args and not options.window:
        error('''Please specify an input script!
        (check /usr/share/shoebot/examples/ for example scripts)''')

    if len(args) > 1:
        error("Too many arguments!")

    inputscript = args[0]

    # all checked, make it happen
    if not options.window:
        # oneshot mode - output to file
        if not options.outputfile:
            print 'No output file specified, defaulting to output.png...'
            outputfile = DEFAULT_OUTPUTFILE
        else:
            outputfile = options.outputfile
            # is it a valid extension?
            filename, extension = os.path.splitext(outputfile)
            if not extension in OUTPUT_EXTENSIONS:
                error("Invalid extension in output filename")

        run_oneshot(inputscript, outputfile)
    else:
        # windowed mode - run on a GTK window
        from shoebot import gtkui
        if options.outputfile:
            error('Windowed mode does not take an output file argument.')

        run_window(inputscript,
                    server=options.socketserver,
                    port=options.serverport,
                    varwindow=options.varwindow)
